{
  // ------------------------------------------------------------
  // High level tasks
  // ------------------------------------------------------------

  // Link the CLI to the user's path (cross-platform)
  link: "bash scripts/link.sh",

  // Unlink the CLI from the user's path (cross-platform)
  unlink: "bash scripts/unlink.sh",

  // Ensure the PATH is set up for the klep CLI
  ensurepath: 'bash scripts/setup-path.sh',

  // Render the README as a PDF
  readme: "pandoc --pdf-engine=typst README.md -o README.pdf && if [ $? -eq 0 ]; then echo 'Finished rendering README.pdf'; else echo 'Failed to render README.pdf'; fi",

  // Build the entire project
  build: "klep rust:build:clean && klep ts:build:clean",

  // Clean the project
  clean: "klep rust:clean && klep ts:clean",

  // Lint & Format the project
  lint: "klep ts:lint && klep rust:lint",
  format: "klep ts:format && klep rust:format && bash scripts/ensure-final-newlines.sh --fix",
  tidy: 'klep lint && klep format',

  // Security Audit
  audit: 'klep ts:audit && klep rust:audit',

  // Test the project
  test: "klep ts:test && klep rust:test",

  // Test with Windows path simulation
  'test:win': "klep ts:test:win && klep rust:test",

  // Test without colors (for CI/CD)
  'test:no-colors': "NO_COLOR=1 klep ts:test && klep rust:test",

    // Pathogen: Fast mutation testing (v2 architecture + universalmutator integration)
  'pathogen:plan': 'mkdir -p .mutations/typescript && echo "Generating mutations..." && find src/cli -name "*.ts" -not -name "*.spec.ts" | xargs -I {} mutate {} --mutantDir .mutations/typescript --noCheck > /dev/null 2>&1 && echo "âœ“ Generated $(find .mutations/typescript -name "*.ts" | wc -l) mutations"',
  'pathogen:test': 'src/rust/target/release/pathogen --source src/cli --output pathogen-report.json --parallel 48',
  'pathogen:aggregate': 'bash scripts/pathogen-aggregate.sh',
  'pathogen:worker': 'src/rust/target/release/pathogen-worker',
  pathogen: 'klep pathogen:plan && klep pathogen:test && klep pathogen:aggregate',

  // Generate behavioral coverage reports (mutation testing)
  coverage: "klep pathogen",

  // Check code quality (never-nester principles)
  quality: "cd src/rust && cargo build --release -p code-quality-checker && ./target/release/code-quality-checker check ../../src --max-depth 3 --max-length 100 --max-complexity 10 && ./target/release/code-quality-checker check ../../scripts --max-depth 3 --max-length 100 --max-complexity 10",

  // Simulate a CI pipeline  
  ci: 'klep ci:tidy && klep ci:build && klep ci:typecheck && klep quality && klep ci:secure && klep test && klep test:win && klep coverage',

  // Git Tasks
  'git:del:all': 'git checkout dev && git branch | grep -v "dev" | xargs git branch -D',
  'tweak' : 'git add . && git commit -m "tweaks" && git push',

  // ------------------------------------------------------------
  // Sub-tasks
  // ------------------------------------------------------------
  // Lint & Format (Fix)
  'ts:lint': 'bun run --bun eslint . --fix',
  'ts:format': 'bun run --bun prettier --write \"src/**/*.ts\" \".github/**/*.yml\" \"*.yml\" \"*.yaml\"',
  'rust:lint': 'cd src/rust && cargo clippy --workspace --all-targets --all-features --fix --allow-dirty --allow-staged',
  'rust:format': 'cd src/rust && cargo fmt --all',

  // Lint & Format (Assert)
  'ts:lint:assert': 'bun run --bun eslint . ',
  'ts:format:assert': 'bun run --bun prettier --check \"src/**/*.ts\" \".github/**/*.yml\" \"*.yml\" \"*.yaml\"',
  'rust:lint:assert': 'cd src/rust && cargo clippy --workspace --all-targets --all-features',
  'rust:format:assert': 'cd src/rust && cargo fmt --all -- --check',

  // Build and/or clean the Rust code
  'rust:build': "cd src/rust && cargo build --release && cd ..",
  'rust:clean': "rm -rf src/rust/pkg src/rust/target",
  'rust:build:clean': "klep rust:clean && klep rust:build",

  // Build and/or clean the TypeScript code
  'ts:build': "bun run --bun tsc --build",
  'ts:clean': "rm -rf node_modules && bun install",
  'ts:build:clean': "klep ts:clean && klep ts:build",

  // Security Audit
  'rust:audit': 'cd src/rust && cargo audit && cd ../..',
  'ts:audit': 'bun audit',

  // Testing
  'ts:test': 'bun test',
  'ts:test:win': 'KLEP_SIMULATE_WINDOWS=1 bun test',
  'rust:test': 'cd src/rust && cargo test --workspace',

  // CI/CD Tasks
  'ci:tidy': 'klep ts:lint:assert && klep ts:format:assert && klep rust:lint:assert && klep rust:format:assert && bash scripts/ensure-final-newlines.sh --check',
  'ci:build': 'klep build',
  'ci:secure': 'klep ts:audit && klep rust:audit',
  'ci:typecheck': 'bun run --bun tsc --noEmit',
  'ci:mutation': 'klep pathogen',
}
