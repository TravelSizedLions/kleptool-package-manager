{

  // ------------------------------------------------------------
  // High level tasks
  // ------------------------------------------------------------

  // Link the CLI to the user's path (cross-platform)
  link: "bash scripts/link.sh",

  // Unlink the CLI from the user's path (cross-platform)
  unlink: "bash scripts/unlink.sh",

  // Ensure the PATH is set up for the klep CLI
  ensurepath: 'bash scripts/setup-path.sh',

  // Render the README as a PDF
  readme: "pandoc --pdf-engine=typst README.md -o README.pdf && if [ $? -eq 0 ]; then echo 'Finished rendering README.pdf'; else echo 'Failed to render README.pdf'; fi",

  // Build the entire project
  build: "klep rust:build:clean && klep ts:build:clean",

  // Build with Bun
  "build:bun": "klep rust:build:clean && klep bun:build:clean",

  // Build standalone executable
  "build:standalone": "bun run scripts/build-standalone.ts",

  // Clean the project
  clean: "klep rust:clean && klep ts:clean && klep bun:clean",

  // Lint & Format the project
  lint: "klep ts:lint && klep rust:lint",
  format: "klep ts:format && klep rust:format",
  tidy: 'klep lint && klep format',

  // Security Audit
  audit: 'klep ts:audit && klep rust:audit',

  // Simulate a CI pipeline (Bun-compatible)
  ci: 'klep ci:bun:tidy && klep ci:bun:build && klep ci:bun:secure',
  
  // Legacy CI pipeline (Node.js)
  'ci:node': 'klep ci:tidy && klep ci:build && klep ci:secure',

  // Delete all branches except for dev
  'git:del:all': 'git checkout dev | git branch | grep -v "dev" | xargs git branch -D',

  // ------------------------------------------------------------
  // Sub-tasks
  // ------------------------------------------------------------
  // Lint & Format (Fix)
  'ts:lint': 'npx eslint . --ext .ts --fix',
  'ts:format': 'npx prettier --write \"src/**/*.ts\"',
  'rust:lint': 'cd src/rust && cargo clippy --workspace --all-targets --all-features --fix --allow-dirty --allow-staged',
  'rust:format': 'cd src/rust && cargo fmt --all',

  // Lint & Format (Assert)
  'ts:lint:assert': 'npx eslint . --ext .ts',
  'ts:format:assert': 'npx prettier --check \"src/**/*.ts\"',
  'rust:lint:assert': 'cd src/rust && cargo clippy --workspace --all-targets --all-features',
  'rust:format:assert': 'cd src/rust && cargo fmt --all -- --check',

  // Build and/or clean the Rust code
  'rust:build': "cd src/rust && cargo build --release && cd ..",
  'rust:clean': "rm -rf src/rust/pkg src/rust/target",
  'rust:build:clean': "klep rust:clean && klep rust:build",

  // Build and/or clean the TypeScript code (Node.js)
  'ts:build': "npx tsc --build",
  'ts:clean': "rm -rf node_modules && yarn install --frozen-lockfile",
  'ts:build:clean': "klep ts:clean && klep ts:build",

  // Build and/or clean with Bun
  'bun:build': "bun build src/index.ts --outdir dist --target node --format esm && mv dist/index.js dist/klep",
  'bun:compile': "bun build src/index.ts --compile --outfile dist/klep",
  'bun:clean': "rm -rf dist && rm -rf bun.lockb",
  'bun:build:clean': "klep bun:clean && klep bun:install && klep bun:build",
  'bun:install': "bun install",

  // Security Audit
  'rust:audit': 'cd src/rust && cargo audit && cd ../..',
  'ts:audit': 'yarn audit --level moderate',
  'bun:audit': 'bun audit',

  // CI/CD Tasks (Node.js)
  'ci:tidy': 'klep ts:lint:assert && klep ts:format:assert && klep rust:lint:assert && klep rust:format:assert',
  'ci:build': 'klep build',
  'ci:secure': 'klep ts:audit && klep rust:audit',
  'ci:typecheck': 'npx tsc --noEmit',
  
  // CI/CD Tasks (Bun)
  'ci:bun:tidy': 'klep ts:lint:assert && klep ts:format:assert && klep rust:lint:assert && klep rust:format:assert',
  'ci:bun:build': 'klep build:bun',
  'ci:bun:secure': 'klep bun:audit && klep rust:audit',
  'ci:bun:typecheck': 'bun --bun tsc --noEmit',
}