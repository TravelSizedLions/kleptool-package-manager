#!/bin/bash

# Script to compare mutation testing results between current PR and baseline
# Creates a GitHub comment with behavioral coverage comparison
# Usage: 
#   ./compare-mutation-coverage.sh <current-report.json> [baseline-report.json]

set -euo pipefail

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common utilities
source "$SCRIPT_DIR/common.sh"

echo "üß¨ Comparing behavioral coverage results..."

# Validate required environment variables
validate_env_var "GITHUB_TOKEN"

CURRENT_REPORT="$1"
BASELINE_REPORT="${2:-}"

# Check if current report exists
if [[ ! -f "$CURRENT_REPORT" ]]; then
    echo "‚ùå Current mutation report not found at $CURRENT_REPORT"
    exit 1
fi

# Extract current metrics
echo "üìä Parsing current mutation testing results..."
CURRENT_TOTAL=$(jq -r '.stats.total_mutations' "$CURRENT_REPORT")
CURRENT_BEHAVIORAL=$(jq -r '.stats.behavioral_kills' "$CURRENT_REPORT")
CURRENT_COMPILE_ERRORS=$(jq -r '.stats.compile_errors' "$CURRENT_REPORT")
CURRENT_SURVIVED=$(jq -r '.stats.survived' "$CURRENT_REPORT")
CURRENT_DURATION=$(jq -r '.stats.duration' "$CURRENT_REPORT")

if [[ "$CURRENT_TOTAL" == "null" ]]; then
    echo "‚ùå Failed to parse current mutation testing statistics"
    exit 1
fi

# Calculate current percentages
CURRENT_KILL_RATE=$(echo "scale=1; (($CURRENT_BEHAVIORAL + $CURRENT_COMPILE_ERRORS) * 100) / $CURRENT_TOTAL" | bc)
CURRENT_BEHAVIORAL_RATE=$(echo "scale=1; ($CURRENT_BEHAVIORAL * 100) / $CURRENT_TOTAL" | bc)
CURRENT_MUT_PER_SEC=$(echo "scale=1; $CURRENT_TOTAL / $CURRENT_DURATION" | bc)

# Generate comparison report
COMMENT_BODY="## üß¨ Behavioral Coverage Report (Mutation Testing)

### üìä Current Results
- **Total Mutations**: $CURRENT_TOTAL
- **Kill Rate**: ${CURRENT_KILL_RATE}% ($((CURRENT_BEHAVIORAL + CURRENT_COMPILE_ERRORS))/$CURRENT_TOTAL killed)
- **Behavioral Kills**: ${CURRENT_BEHAVIORAL_RATE}% ($CURRENT_BEHAVIORAL/$CURRENT_TOTAL)
- **Compile Errors**: $CURRENT_COMPILE_ERRORS
- **Survived**: $CURRENT_SURVIVED
- **Performance**: ${CURRENT_MUT_PER_SEC} mutations/sec

"

# Add baseline comparison if available
if [[ -n "$BASELINE_REPORT" && -f "$BASELINE_REPORT" ]]; then
    echo "üìä Parsing baseline mutation testing results..."
    BASELINE_TOTAL=$(jq -r '.stats.total_mutations' "$BASELINE_REPORT")
    BASELINE_BEHAVIORAL=$(jq -r '.stats.behavioral_kills' "$BASELINE_REPORT")
    BASELINE_COMPILE_ERRORS=$(jq -r '.stats.compile_errors' "$BASELINE_REPORT")
    BASELINE_SURVIVED=$(jq -r '.stats.survived' "$BASELINE_REPORT")
    
    if [[ "$BASELINE_TOTAL" != "null" ]]; then
        BASELINE_KILL_RATE=$(echo "scale=1; (($BASELINE_BEHAVIORAL + $BASELINE_COMPILE_ERRORS) * 100) / $BASELINE_TOTAL" | bc)
        BASELINE_BEHAVIORAL_RATE=$(echo "scale=1; ($BASELINE_BEHAVIORAL * 100) / $BASELINE_TOTAL" | bc)
        
        # Calculate differences
        KILL_RATE_DIFF=$(echo "scale=1; $CURRENT_KILL_RATE - $BASELINE_KILL_RATE" | bc)
        BEHAVIORAL_RATE_DIFF=$(echo "scale=1; $CURRENT_BEHAVIORAL_RATE - $BASELINE_BEHAVIORAL_RATE" | bc)
        SURVIVED_DIFF=$((CURRENT_SURVIVED - BASELINE_SURVIVED))
        
        # Format differences with + for positive values
        [[ $(echo "$KILL_RATE_DIFF >= 0" | bc) -eq 1 ]] && KILL_RATE_DIFF="+$KILL_RATE_DIFF"
        [[ $(echo "$BEHAVIORAL_RATE_DIFF >= 0" | bc) -eq 1 ]] && BEHAVIORAL_RATE_DIFF="+$BEHAVIORAL_RATE_DIFF"
        [[ $SURVIVED_DIFF -gt 0 ]] && SURVIVED_DIFF="+$SURVIVED_DIFF"
        
        COMMENT_BODY+="### üìà Comparison vs Baseline
- **Kill Rate**: ${CURRENT_KILL_RATE}% (${KILL_RATE_DIFF}%)
- **Behavioral Rate**: ${CURRENT_BEHAVIORAL_RATE}% (${BEHAVIORAL_RATE_DIFF}%)
- **Survived**: $CURRENT_SURVIVED (${SURVIVED_DIFF})

"
    fi
else
    COMMENT_BODY+="### üìù Note
No baseline available for comparison (first run on this branch).

"
fi

# Add quality assessment
if (( $(echo "$CURRENT_BEHAVIORAL_RATE >= 95" | bc -l) )); then
    QUALITY="üü¢ **EXCELLENT** - Outstanding behavioral coverage!"
elif (( $(echo "$CURRENT_BEHAVIORAL_RATE >= 80" | bc -l) )); then
    QUALITY="üü° **GOOD** - Solid behavioral coverage"
elif (( $(echo "$CURRENT_BEHAVIORAL_RATE >= 60" | bc -l) )); then
    QUALITY="üü† **MODERATE** - Consider improving test coverage"
else
    QUALITY="üî¥ **NEEDS IMPROVEMENT** - Low behavioral coverage detected"
fi

COMMENT_BODY+="### üéØ Quality Assessment
$QUALITY

### üöÄ Performance
Completed in ${CURRENT_DURATION}s at ${CURRENT_MUT_PER_SEC} mutations/sec

---
*Generated by Klep Mutation Testing v2 ü¶Ä*"

# Create temporary file for comment body
COMMENT_FILE=$(mktemp)
echo "$COMMENT_BODY" > "$COMMENT_FILE"

echo "üí¨ Posting behavioral coverage comment to PR..."

# Post comment to GitHub PR (requires GITHUB_TOKEN and PR context)
if [[ -n "${GITHUB_EVENT_PATH:-}" ]] && [[ -f "$GITHUB_EVENT_PATH" ]]; then
    PR_NUMBER=$(jq -r '.pull_request.number // .number // empty' "$GITHUB_EVENT_PATH")
    REPO=$(jq -r '.repository.full_name' "$GITHUB_EVENT_PATH")
    
    if [[ -n "$PR_NUMBER" && "$PR_NUMBER" != "null" ]]; then
        curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments" \
            -d "{\"body\": $(jq -Rs . < "$COMMENT_FILE")}" > /dev/null
        echo "‚úÖ Posted behavioral coverage comment to PR #$PR_NUMBER"
    else
        echo "‚ÑπÔ∏è  Not a PR context, skipping comment posting"
        echo "üìù Comment would have been:"
        cat "$COMMENT_FILE"
    fi
else
    echo "‚ÑπÔ∏è  No GitHub event context, skipping comment posting"
    echo "üìù Comment would have been:"
    cat "$COMMENT_FILE"
fi

# Cleanup
rm -f "$COMMENT_FILE"

echo "üéâ Behavioral coverage comparison completed!" 