name: Build and Test

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
    # This will run on any PR targeting dev, regardless of source branch name

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Klep Dependencies
      uses: ./.github/actions/setup-klep

    - name: Build Project
      run: klep ci:build

    - name: Test Rust
      run: |
        cd src/rust
        cargo test --workspace

    - name: Test klep CLI (Integration Tests)
      run: klep demo

    # Coverage generation (Linux only)
    - name: Cache cargo-tarpaulin (Linux only)
      id: cache-cargo-tarpaulin
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/cargo-tarpaulin
          ~/.cargo/.crates.toml
          ~/.cargo/.crates2.json
        key: ${{ runner.os }}-cargo-tarpaulin-v0.32.7
        restore-keys: |
          ${{ runner.os }}-cargo-tarpaulin-

    - name: Install cargo-tarpaulin (Linux only)
      if: matrix.os == 'ubuntu-latest' && steps.cache-cargo-tarpaulin.outputs.cache-hit != 'true'
      run: cargo install cargo-tarpaulin

    - name: Generate TypeScript Coverage (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: klep ts:coverage

    - name: Generate Rust Coverage (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: klep rust:coverage

    - name: Upload coverage reports (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 30

    - name: Coverage Summary (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: ./scripts/coverage-summary.sh
