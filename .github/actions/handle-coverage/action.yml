name: 'Coverage'
description: 'Handles uploading and comparing coverage for a pull request'

inputs:
  operation:
    description: 'The operation to perform (upload, compare, badge)'
    required: true
    default: 'upload'
  github_token:
    description: 'GitHub token for downloading artifacts'
    required: false
    default: ''
  barecheck_token:
    description: 'Barecheck GitHub App token for code coverage reports'
    required: false
    default: ''
  gist_id:
    description: 'GitHub Gist ID for badge storage (will be created if not provided)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    # Upload Coverage
    - name: Upload Coverage (TypeScript)
      if: inputs.operation == 'upload'
      uses: actions/upload-artifact@v4
      with:
        name: dev-typescript-coverage
        path: ./coverage/typescript/lcov.info
        retention-days: 30

    - name: Upload Coverage (Rust)
      if: inputs.operation == 'upload'
      uses: actions/upload-artifact@v4
      with:
        name: dev-rust-coverage
        path: ./coverage/rust/lcov.info
        retention-days: 30

    # Compare Coverage
    - name: Download TypeScript Base Coverage from dev
      if: inputs.operation == 'compare'
      uses: dawidd6/action-download-artifact@v10
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        branch: dev
        name: dev-typescript-coverage
        path: ./base-coverage/typescript/
        if_no_artifact_found: warn

    - name: Download Rust Base Coverage from dev
      if: inputs.operation == 'compare'
      uses: dawidd6/action-download-artifact@v10
      continue-on-error: true
      with:
        github_token: ${{ inputs.github_token }}
        branch: dev
        name: dev-rust-coverage
        path: ./base-coverage/rust/
        if_no_artifact_found: warn

    - name: Check if TypeScript base coverage exists
      id: check-ts-base
      shell: bash
      run: |
        if [ -f "./base-coverage/typescript/lcov.info" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi  

    - name: Check if Rust base coverage exists
      id: check-rust-base
      shell: bash
      run: |
        if [ -f "./base-coverage/rust/lcov.info" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Compare Coverage (TypeScript)
      if: inputs.operation == 'compare' && steps.check-ts-base.outputs.exists == 'true'
      uses: barecheck/code-coverage-action@v1
      with:
        barecheck-github-app-token: ${{ inputs.barecheck_token }}
        lcov-file: "./coverage/typescript/lcov.info"
        base-lcov-file: "./base-coverage/typescript/lcov.info"
        minimum-ratio: 0
        send-summary-comment: true
        show-annotations: "warning"

    - name: Compare Coverage (Rust)
      if: inputs.operation == 'compare' && steps.check-rust-base.outputs.exists == 'true'
      uses: barecheck/code-coverage-action@v1
      with:
        barecheck-github-app-token: ${{ inputs.barecheck_token }}
        lcov-file: "./coverage/rust/lcov.info"
        base-lcov-file: "./base-coverage/rust/lcov.info"
        minimum-ratio: 0
        send-summary-comment: true
        show-annotations: "warning"

    - name: Generate TypeScript Coverage Report (no baseline)
      if: inputs.operation == 'compare' && steps.check-ts-base.outputs.exists == 'false'
      uses: barecheck/code-coverage-action@v1
      with:
        barecheck-github-app-token: ${{ inputs.barecheck_token }}
        lcov-file: "./coverage/typescript/lcov.info"
        minimum-ratio: 0
        send-summary-comment: true
        show-annotations: "warning"
        app-name: "TypeScript (No Baseline)"

    - name: Generate Rust Coverage Report (no baseline)
      if: inputs.operation == 'compare' && steps.check-rust-base.outputs.exists == 'false'
      uses: barecheck/code-coverage-action@v1
      with:
        barecheck-github-app-token: ${{ inputs.barecheck_token }}
        lcov-file: "./coverage/rust/lcov.info"
        minimum-ratio: 0
        send-summary-comment: true
        show-annotations: "warning"
        app-name: "Rust (No Baseline)"

    # Badge Creation
    - name: Extract Coverage Percentages
      if: inputs.operation == 'badge'
      id: coverage-percentages
      shell: bash
      run: ./scripts/extract-coverage.sh

    - name: Create or Update Coverage Badges
      if: inputs.operation == 'badge'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        GIST_ID: ${{ inputs.gist_id }}
        TS_COVERAGE: ${{ steps.coverage-percentages.outputs.typescript_coverage }}
        RUST_COVERAGE: ${{ steps.coverage-percentages.outputs.rust_coverage }}
      run: ./scripts/update-coverage-badges.sh